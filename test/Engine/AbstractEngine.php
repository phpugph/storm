<?php

namespace Storm\Engine;

use PDO;
use StdClass;
use PHPUnit\Framework\TestCase;

use UGComponents\Resolver\ResolverHandler;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-07-27 at 02:11:02.
 */
class Storm_Enggine_AbstractEngine_Test extends TestCase
{
  /**
   * @var AbstractSql
   */
  protected $object;

  /**
   * Sets up the fixture, for example, opens a network connection.
   * This method is called before a test is executed.
   */
  protected function setUp()
  {
    $this->object = new AbstractEngineStub;
  }

  /**
   * Tears down the fixture, for example, closes a network connection.
   * This method is called after a test is executed.
   */
  protected function tearDown()
  {
  }

  /**
   * @covers Storm\Engine\AbstractEngine::bind
   */
  public function testBind()
  {
    $this->assertEquals(':bind0bind', $this->object->bind('foobar'));
    $this->assertEquals('(:bind1bind,:bind2bind)', $this->object->bind(array('foo','bar')));
    $this->assertEquals(1, $this->object->bind(1));
  }

  /**
   * @covers Storm\Engine\AbstractEngine::collection
   */
  public function testCollection()
  {
    $collection = $this->object->collection();
    $this->assertInstanceOf('Storm\Mapper\Collection', $collection);
  }

  /**
   * @covers Storm\Engine\AbstractEngine::deleteRows
   */
  public function testDeleteRows()
  {
    $instance = $this->object->deleteRows('foobar', 'foo=bar');
    $this->assertInstanceOf('Storm\Engine\AbstractEngineStub', $instance);

    $instance = $this->object->deleteRows('foobar', array('foo=%s', 'bar'));
    $this->assertInstanceOf('Storm\Engine\AbstractEngineStub', $instance);

    $instance = $this->object->deleteRows('foobar', array(array('foo=%s', 'bar')));
    $this->assertInstanceOf('Storm\Engine\AbstractEngineStub', $instance);
  }

  /**
   * @covers Storm\Engine\AbstractEngine::getBinds
   */
  public function testGetBinds()
  {
     $this->assertEquals(':bind0bind', $this->object->bind('foo'));
     $this->assertEquals(':bind1bind', $this->object->bind('bar'));

     $binds = $this->object->getBinds();

     $this->assertEquals('foo', $binds[':bind0bind']);
     $this->assertEquals('bar', $binds[':bind1bind']);
  }

  /**
   * @covers Storm\Engine\AbstractEngine::getConnection
   */
  public function testGetConnection()
  {
    $actual = $this->object->getConnection();
    $this->assertInstanceOf('PDO', $actual);
  }

  /**
   * @covers Storm\Engine\AbstractEngine::getDeleteQuery
   */
  public function testGetDeleteQuery()
  {
    $actual = $this->object->getDeleteQuery('foobar');
    $this->assertInstanceOf('Storm\Query\Delete', $actual);
  }

  /**
   * @covers Storm\Engine\AbstractEngine::getInsertQuery
   */
  public function testGetInsertQuery()
  {
    $actual = $this->object->getInsertQuery('foobar');
    $this->assertInstanceOf('Storm\Query\Insert', $actual);
  }

  /**
   * @covers Storm\Engine\AbstractEngine::getLastInsertedId
   */
  public function testGetLastInsertedId()
  {
    $actual = $this->object->getLastInsertedId();
    $this->assertEquals(123, $actual);
  }

  /**
   * @covers Storm\Engine\AbstractEngine::getModel
   */
  public function testGetModel()
  {
    $model = $this->object->getModel('foobar', 'foo_id', 3);
    $this->assertInstanceOf('Storm\Mapper\Model', $model);
  }

  /**
   * @covers Storm\Engine\AbstractEngine::getRow
   */
  public function testGetRow()
  {
    $actual = $this->object->getRow('foobar', 'foo_id', 3);
    $this->assertEquals('SELECT * FROM foobar WHERE foo_id = 3 LIMIT 0, 1;', $actual['query']);
  }

  /**
   * @covers Storm\Engine\AbstractEngine::getSelectQuery
   */
  public function testGetSelectQuery()
  {
    $actual = $this->object->getSelectQuery('foobar');
    $this->assertInstanceOf('Storm\Query\Select', $actual);
  }

  /**
   * @covers Storm\Engine\AbstractEngine::getUpdateQuery
   */
  public function testGetUpdateQuery()
  {
    $actual = $this->object->getUpdateQuery('foobar');
    $this->assertInstanceOf('Storm\Query\Update', $actual);
  }

  /**
   * @covers Storm\Engine\AbstractEngine::insertRow
   */
  public function testInsertRow()
  {
    $instance = $this->object->insertRow('foobar', array(
      'foo' => 'bar',
      'bar' => null
    ));

    $this->assertInstanceOf('Storm\Engine\AbstractEngineStub', $instance);
  }

  /**
   * @covers Storm\Engine\AbstractEngine::insertRows
   */
  public function testInsertRows()
  {
    $instance = $this->object->insertRows('foobar', array(
      array(
        'foo' => 'bar',
        'bar' => 'foo'
      ),
      array(
        'foo' => 'bar',
        'bar' => 'foo'
      )
    ));

    $this->assertInstanceOf('Storm\Engine\AbstractEngineStub', $instance);
  }

  /**
   * @covers Storm\Engine\AbstractEngine::model
   */
  public function testModel()
  {
    $collection = $this->object->model();
    $this->assertInstanceOf('Storm\Mapper\Model', $collection);
  }

  /**
   * @covers Storm\Engine\AbstractEngine::query
   */
  public function testQuery()
  {
    $actual = $this->object->query('foobar', array('foo', 'bar'));
    $this->assertEquals('foobar', $actual[0]['query']);
  }

  /**
   * @covers Storm\Engine\AbstractEngine::search
   */
  public function testSearch()
  {
    $collection = $this->object->search('foobar');
    $this->assertInstanceOf('Storm\Mapper\Search', $collection);
  }

  /**
   * @covers Storm\Engine\AbstractEngine::setBinds
   */
  public function testSetBinds()
  {
    $instance = $this->object->setBinds(array(
      'foo' => 'bar',
      'bar' => 'foo'
    ));

    $this->assertInstanceOf('Storm\Engine\AbstractEngineStub', $instance);
  }

  /**
   * @covers Storm\Engine\AbstractEngine::setRow
   */
  public function testSetRow()
  {
    $instance = $this->object->setRow('foobar', 'foo_id', 3, array(
      'foo' => 'bar',
      'bar' => 'foo'
    ));

    $this->assertInstanceOf('Storm\Engine\AbstractEngineStub', $instance);
  }

  /**
   * @covers Storm\Engine\AbstractEngine::updateRows
   */
  public function testUpdateRows()
  {
    $instance = $this->object->updateRows('foobar', array(
      'foo' => 'bar',
      'bar' => 'foo'
    ), 'foo=bar');

    $this->assertInstanceOf('Storm\Engine\AbstractEngineStub', $instance);
  }

  /**
   * @covers Storm\Engine\AbstractEngine::loadState
   */
  public function testLoadState()
  {
    $state1 = new AbstractEngineStub();
    $state2 = new AbstractEngineStub();

    $state1->saveState('state1');
    $state2->saveState('state2');

    $this->assertTrue($state2 === $state1->loadState('state2'));
    $this->assertTrue($state1 === $state2->loadState('state1'));
  }

  /**
   * @covers Storm\Engine\AbstractEngine::saveState
   */
  public function testSaveState()
  {
    $state1 = new AbstractEngineStub();
    $state2 = new AbstractEngineStub();

    $state1->saveState('state1');
    $state2->saveState('state2');

    $this->assertTrue($state2 === $state1->loadState('state2'));
    $this->assertTrue($state1 === $state2->loadState('state1'));
  }

  /**
   * @covers Storm\Engine\AbstractEngine::__call
   * @todo   Implement test__call().
   */
  public function test__call()
  {
    $actual = $this->object->addResolver(ResolverCallStub::class, function() {});
    $this->assertInstanceOf('Storm\Engine\AbstractEngineStub', $actual);
  }

  /**
   * @covers Storm\Engine\AbstractEngine::__callResolver
   * @todo   Implement test__callResolver().
   */
  public function test__callResolver()
  {
    $actual = $this->object->addResolver(ResolverCallStub::class, function() {});
    $this->assertInstanceOf('Storm\Engine\AbstractEngineStub', $actual);
  }

  /**
   * @covers Storm\Engine\AbstractEngine::addResolver
   */
  public function testAddResolver()
  {
    $actual = $this->object->addResolver(ResolverCallStub::class, function() {});
    $this->assertInstanceOf('Storm\Engine\AbstractEngineStub', $actual);
  }

  /**
   * @covers Storm\Engine\AbstractEngine::getResolverHandler
   */
  public function testGetResolverHandler()
  {
    $actual = $this->object->getResolverHandler();
    $this->assertInstanceOf('UGComponents\Resolver\ResolverHandler', $actual);
  }

  /**
   * @covers Storm\Engine\AbstractEngine::resolve
   */
  public function testResolve()
  {
    $actual = $this->object->addResolver(
      ResolverCallStub::class,
      function() {
        return new ResolverAddStub();
      }
    )
    ->resolve(ResolverCallStub::class)
    ->foo('bar');

    $this->assertEquals('barfoo', $actual);
  }

  /**
   * @covers Storm\Engine\AbstractEngine::resolveShared
   */
  public function testResolveShared()
  {
    $actual = $this
      ->object
      ->resolveShared(ResolverSharedStub::class)
      ->reset()
      ->foo('bar');

    $this->assertEquals('barfoo', $actual);

    $actual = $this
      ->object
      ->resolveShared(ResolverSharedStub::class)
      ->foo('bar');

    $this->assertEquals('barbar', $actual);
  }

  /**
   * @covers Storm\Engine\AbstractEngine::resolveStatic
   */
  public function testResolveStatic()
  {
    $actual = $this
      ->object
      ->resolveStatic(
        ResolverStaticStub::class,
        'foo',
        'bar'
      );

    $this->assertEquals('barfoo', $actual);
  }

  /**
   * @covers Storm\Engine\AbstractEngine::setResolverHandler
   */
  public function testSetResolverHandler()
  {
    $actual = $this->object->setResolverHandler(new ResolverHandler);
    $this->assertInstanceOf('Storm\Engine\AbstractEngineStub', $actual);
  }
}

if(!class_exists('Storm\Engine\AbstractEngineStub')) {
  class AbstractEngineStub extends AbstractEngine implements EngineInterface
  {
    public function connect($options = []): EngineInterface
    {
      $this->connection = new \PDO('sqlite:'.dirname(__DIR__).'/assets/sqlite.db', 'root', '');;
      return $this;
    }

    public function getLastInsertedId(?string $column = null): int
    {
      return 123;
    }

    public function query($query, array $binds = [], ?callable $fetch = null)
    {
      return array(array(
        'total' => 123,
        'query' => (string) $query,
        'binds' => $binds
      ));
    }

    public function getColumns()
    {
      return array(
        array(
          'Field' => 'foobar_id',
          'Type' => 'int',
          'Key' => 'PRI',
          'Default' => null,
          'Null' => 1
        ),
        array(
          'Field' => 'foobar_title',
          'Type' => 'vachar',
          'Key' => null,
          'Default' => null,
          'Null' => 1
        ),
        array(
          'Field' => 'foobar_date',
          'Type' => 'datetime',
          'Key' => null,
          'Default' => null,
          'Null' => 1
        )
      );
    }
  }
}

if(!class_exists('Storm\Engine\ResolverCallStub')) {
  class ResolverCallStub
  {
    public function foo($string)
    {
      return $string . 'foo';
    }
  }
}

if(!class_exists('Storm\Engine\ResolverAddStub')) {
  class ResolverAddStub
  {
    public function foo($string)
    {
      return $string . 'foo';
    }
  }
}

if(!class_exists('Storm\Engine\ResolverSharedStub')) {
  class ResolverSharedStub
  {
    public $name = 'foo';

    public function foo($string)
    {
      $name = $this->name;
      $this->name = $string;
      return $string . $name;
    }

    public function reset()
    {
      $this->name = 'foo';
      return $this;
    }
  }
}

if(!class_exists('Storm\Engine\ResolverStaticStub')) {
  class ResolverStaticStub
  {
    public static function foo($string)
    {
      return $string . 'foo';
    }
  }
}
