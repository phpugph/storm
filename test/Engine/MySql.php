<?php

namespace Storm\Engine;

use PDO;
use StdClass;
use PHPUnit\Framework\TestCase;

use Storm\SqlFactory;

use UGComponents\Profiler\InspectorHandler;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-07-27 at 02:11:02.
 */
class Storm_Engine_MySql_Test extends TestCase
{
  /**
   * @var MySql
   */
  protected $object;

  /**
   * Sets up the fixture, for example, opens a network connection.
   * This method is called before a test is executed.
   */
  protected function setUp(): void
  {
    $this->object = SqlFactory::load(include(dirname(__DIR__).'/assets/mysql.php'));
    $schema = file_get_contents(dirname(__DIR__).'/assets/mysql-schema.sql');
    $this->object->query($schema);
  }

  /**
   * Tears down the fixture, for example, closes a network connection.
   * This method is called after a test is executed.
   */
  protected function tearDown(): void
  {
  }

  /**
   * @covers Storm\Engine\MySql::__construct
   */
  public function test__construct()
  {
    $actual = $this->object->__construct('foo', 'foo', 'foo');
    $this->assertNull($actual);
  }

  /**
   * @covers Storm\Engine\MySql::connect
   */
  public function testConnect()
  {
    $instance = $this->object->connect(include(dirname(__DIR__).'/assets/mysql.php'));
    $this->assertInstanceOf('Storm\Engine\MySql', $instance);

    $this->object->__construct('127.0.0.1', 'testing_db', 'root');
    $instance = $this->object->connect();
    $this->assertInstanceOf('Storm\Engine\MySql', $instance);
  }

  /**
   * @covers Storm\Engine\MySql::getAlterQuery
   */
  public function testGetAlterQuery()
  {
    $instance = $this->object->getAlterQuery('foobar');
    $this->assertInstanceOf('Storm\Query\MySql\Alter', $instance);
  }

  /**
   * @covers Storm\Engine\MySql::getColumns
   */
  public function testGetColumns()
  {
    $actual = $this->object->getColumns('address');
    $this->assertTrue(is_array($actual));

    //$actual = $this->object->getColumns('address', array(array("Field LIKE 'address_%'")));
    //$this->assertTrue(is_array($actual));
  }

  /**
   * @covers Storm\Engine\MySql::getCreateQuery
   */
  public function testGetCreateQuery()
  {
    $instance = $this->object->getCreateQuery('foobar');
    $this->assertInstanceOf('Storm\Query\MySql\Create', $instance);
  }

  /**
   * @covers Storm\Engine\MySql::getPrimaryKey
   */
  public function testGetPrimaryKey()
  {
    $actual = $this->object->getPrimaryKey('address');
    $this->assertEquals('address_id', $actual);
  }

  /**
   * @covers Storm\Engine\MySql::getTables
   */
  public function testGetTables()
  {
    $actual = $this->object->getTables();
    $this->assertTrue(is_array($actual));
  }

  /**
   * @covers Storm\Engine\MySql::getTableSchema
   */
  public function testGetTableSchema()
  {
    $this->object->insertRow('address', array(
      'address_label' => 'Foo Bar',
      'address_street' => 'foobar',
      'address_city' => 'foobar',
      'address_country' => 'foobar',
      'address_postal' => 'foobar',
      'address_created' => date('Y-m-d H:i:s'),
      'address_updated' => date('Y-m-d H:i:s')
    ));
    $actual = $this->object->getTableSchema('address');
    $this->assertStringContainsString('CREATE TABLE `address`', $actual);
  }

  /**
   * @covers Storm\Engine\MySql::getUtilityQuery
   */
  public function testGetUtilityQuery()
  {
    $instance = $this->object->getUtilityQuery();
    $this->assertInstanceOf('Storm\Query\MySql\Utility', $instance);
  }

  /**
   * @covers Storm\AbstractSql::query
   * @covers Storm\Search::getRows
   */
  public function testQuery()
  {
    $test = $this;
    $triggered = false;
    $instance = $this->object->query('SELECT * FROM address', array(), function($row) use ($test, &$triggered) {
      $triggered = true;
      $test->assertInstanceOf('Storm\Engine\MySql', $this);
      $test->assertEquals($row['address_label'], 'Foo Bar');
      return false;
    });

    $this->assertInstanceOf('Storm\Engine\MySql', $instance);
    $this->assertTrue($triggered);

    $row = $this->object->search('address')->getRow();
    $this->assertEquals($row['address_label'], 'Foo Bar');

    $triggered = false;
    $instance = $this->object->search('address')->getRows(function($row) use ($test, &$triggered) {
      $triggered = true;
      $test->assertInstanceOf('Storm\Engine\MySql', $this);
      $test->assertEquals($row['address_label'], 'Foo Bar');
      return false;
    });

    $this->assertInstanceOf('Storm\Mapper\Search', $instance);
    $this->assertTrue($triggered);
  }

  /**
   * @covers Storm\AbstractSql::transaction
   * @covers Storm\Search::getTotal
   */
  public function testTransaction()
  {
    $test = $this;
    $triggered = false;

    $total = $this->object->search('address')->getTotal();

    $this->object->transaction(function() use ($test, &$triggered) {
      $triggered = true;
      $test->assertInstanceOf('Storm\Engine\MySql', $this);

      $this->insertRow('address', array(
        'address_label' => 'Foo Bar',
        'address_street' => 'foobar',
        'address_city' => 'foobar',
        'address_country' => 'foobar',
        'address_postal' => 'foobar',
        'address_created' => date('Y-m-d H:i:s'),
        'address_updated' => date('Y-m-d H:i:s')
      ));
    });

    $this->assertTrue($triggered);
    $this->assertEquals($total + 1, $this->object->search('address')->getTotal());

    $triggered = false;
    $this->object->transaction(function() use ($test, &$triggered) {
      $triggered = true;
      $test->assertInstanceOf('Storm\Engine\MySql', $this);

      $this->insertRow('address', array(
        'address_label' => 'Foo Bar',
        'address_street' => 'foobar',
        'address_city' => 'foobar',
        'address_country' => 'foobar',
        'address_postal' => 'foobar',
        'address_created' => date('Y-m-d H:i:s'),
        'address_updated' => date('Y-m-d H:i:s')
      ));

      return false;
    });

    $this->assertTrue($triggered);
    $this->assertEquals($total + 1, $this->object->search('address')->getTotal());
  }

  /**
   * @covers Storm\Engine\AbstractEngine::loop
   */
  public function testLoop()
  {
    $self = $this;
    $this->object->loop(function($i) use ($self) {
      $self->assertInstanceOf('Storm\Engine\MySql', $this);

      if ($i == 2) {
        return false;
      }
    });
  }

  /**
   * @covers Storm\Engine\AbstractEngine::when
   */
  public function testWhen()
  {
    $self = $this;
    $test = 'Good';
    $this->object->when(function() use ($self) {
      $self->assertInstanceOf('Storm\Engine\MySql', $this);
      return false;
    }, function() use ($self, &$test) {
      $self->assertInstanceOf('Storm\Engine\MySql', $this);
      $test = 'Bad';
    });
  }

  /**
   * @covers Storm\Engine\AbstractEngine::getInspectorHandler
   */
  public function testGetInspectorHandler()
  {
    $instance = $this->object->getInspectorHandler();
    $this->assertInstanceOf('UGComponents\Profiler\InspectorHandler', $instance);
  }

  /**
   * @covers Storm\Engine\AbstractEngine::inspect
   */
  public function testInspect()
  {
    ob_start();
    $this->object->inspect('foobar');
    $contents = ob_get_contents();
    ob_end_clean();

    $this->assertEquals(
      '<pre>INSPECTING Variable:</pre><pre>foobar</pre>',
      $contents
    );
  }

  /**
   * @covers Storm\Engine\AbstractEngine::setInspectorHandler
   */
  public function testSetInspectorHandler()
  {
    $instance = $this->object->setInspectorHandler(new InspectorHandler);
    $this->assertInstanceOf('Storm\Engine\MySql', $instance);
  }

  /**
   * @covers Storm\Engine\AbstractEngine::addLogger
   */
  public function testAddLogger()
  {
    $instance = $this->object->addLogger(function() {});
    $this->assertInstanceOf('Storm\Engine\MySql', $instance);
  }

  /**
   * @covers Storm\Engine\AbstractEngine::log
   */
  public function testLog()
  {
    $trigger = new StdClass();
    $trigger->success = null;
    $this->object->addLogger(function($trigger) {
      $trigger->success = true;
    })
    ->log($trigger);


    $this->assertTrue($trigger->success);
  }
}
