<?php

namespace Storm\Engine;

use PDO;
use StdClass;
use PHPUnit\Framework\TestCase;

use Storm\SqlFactory;

use UGComponents\Profiler\InspectorHandler;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-07-27 at 02:11:02.
 */
class Storm_Engine_PostGreSql_Test extends TestCase
{
  /**
   * @var PostGreSql
   */
  protected $object;

  /**
   * Sets up the fixture, for example, opens a network connection.
   * This method is called before a test is executed.
   */
  protected function setUp(): void
  {
    $this->object = SqlFactory::load(include dirname(__DIR__) . '/assets/pgsql.php');
    $schema = file_get_contents(dirname(__DIR__) . '/assets/pgsql-schema.sql');
    $this->object->query($schema);
  }

  /**
   * Tears down the fixture, for example, closes a network connection.
   * This method is called after a test is executed.
   */
  protected function tearDown(): void
  {
  }

  /**
   * @covers Storm\Engine\PostGreSql::connect
   */
  public function testConnect()
  {
    $instance = $this->object->connect(include dirname(__DIR__) . '/assets/pgsql.php');
    $this->assertInstanceOf('Storm\Engine\PostGreSql', $instance);
  }

  /**
   * @covers Storm\Engine\PostGreSql::getAlterQuery
   */
  public function testGetAlterQuery()
  {
    $instance = $this->object->getAlterQuery('foobar');
    $this->assertInstanceOf('Storm\Query\PostGreSql\Alter', $instance);
  }

  /**
   * @covers Storm\Engine\PostGreSql::getColumns
   */
  public function testGetColumns()
  {
    $actual = $this->object->getColumns('address');
    $this->assertTrue(is_array($actual));
  }

  /**
   * @covers Storm\Engine\PostGreSql::getCreateQuery
   */
  public function testGetCreateQuery()
  {
    $instance = $this->object->getCreateQuery('foobar');
    $this->assertInstanceOf('Storm\Query\PostGreSql\Create', $instance);
  }

  /**
   * @covers Storm\Engine\PostGreSql::getDeleteQuery
   */
  public function testGetDeleteQuery()
  {
    $instance = $this->object->getDeleteQuery('foobar');
    $this->assertInstanceOf('Storm\Query\PostGreSql\Delete', $instance);
  }

  /**
   * @covers Storm\Engine\PostGreSql::getIndexes
   */
  public function testGetIndexes()
  {
    $actual = $this->object->getIndexes('address');
    $this->assertTrue(is_array($actual));
  }

  /**
   * @covers Storm\Engine\PostGreSql::getInsertQuery
   */
  public function testGetInsertQuery()
  {
    $instance = $this->object->getInsertQuery('foobar');
    $this->assertInstanceOf('Storm\Query\PostGreSql\Insert', $instance);
  }

  /**
   * @covers Storm\Engine\PostGreSql::getPrimary
   */
  public function testGetPrimary()
  {
    $actual = $this->object->getPrimary('address');
    $this->assertTrue(is_array($actual));
  }

  /**
   * @covers Storm\Engine\PostGreSql::getSelectQuery
   */
  public function testGetSelectQuery()
  {
    $instance = $this->object->getSelectQuery('foobar');
    $this->assertInstanceOf('Storm\Query\PostGreSql\Select', $instance);
  }

  /**
   * @covers Storm\Engine\PostGreSql::getTables
   */
  public function testGetTables()
  {
    $actual = $this->object->getTables();
    $this->assertEquals('address', $actual[0]['tablename']);
  }

  /**
   * @covers Storm\Engine\PostGreSql::getUpdateQuery
   */
  public function testGetUpdateQuery()
  {
    $instance = $this->object->getUpdateQuery('foobar');
    $this->assertInstanceOf('Storm\Query\PostGreSql\Update', $instance);
  }

  /**
   * @covers Storm\Engine\PostGreSql::setSchema
   */
  public function testSetSchema()
  {
    $instance = $this->object->setSchema('public');
    $this->assertInstanceOf('Storm\Engine\PostGreSql', $instance);
  }

  /**
   * @covers Storm\Engine\PostGreSql::getUtilityQuery
   */
  public function testGetUtilityQuery()
  {
    $instance = $this->object->getUtilityQuery();
    $this->assertInstanceOf('Storm\Query\PostGreSql\Utility', $instance);
  }

  /**
   * @covers Storm\Engine\AbstractEngine::loop
   */
  public function testLoop()
  {
    $self = $this;
    $this->object->loop(function($i) use ($self) {
      $self->assertInstanceOf('Storm\Engine\PostGreSql', $this);

      if ($i == 2) {
        return false;
      }
    });
  }

  /**
   * @covers Storm\Engine\AbstractEngine::when
   */
  public function testWhen()
  {
    $self = $this;
    $test = 'Good';
    $this->object->when(function() use ($self) {
      $self->assertInstanceOf('Storm\Engine\PostGreSql', $this);
      return false;
    }, function() use ($self, &$test) {
      $self->assertInstanceOf('Storm\Engine\PostGreSql', $this);
      $test = 'Bad';
    });
  }

  /**
   * @covers Storm\Engine\AbstractEngine::getInspectorHandler
   */
  public function testGetInspectorHandler()
  {
    $instance = $this->object->getInspectorHandler();
    $this->assertInstanceOf('UGComponents\Profiler\InspectorHandler', $instance);
  }

  /**
   * @covers Storm\Engine\AbstractEngine::inspect
   */
  public function testInspect()
  {
    ob_start();
    $this->object->inspect('foobar');
    $contents = ob_get_contents();
    ob_end_clean();

    $this->assertEquals(
      '<pre>INSPECTING Variable:</pre><pre>foobar</pre>',
      $contents
    );
  }

  /**
   * @covers Storm\Engine\AbstractEngine::setInspectorHandler
   */
  public function testSetInspectorHandler()
  {
    $instance = $this->object->setInspectorHandler(new InspectorHandler);
    $this->assertInstanceOf('Storm\Engine\PostGreSql', $instance);
  }

  /**
   * @covers Storm\Engine\AbstractEngine::addLogger
   */
  public function testAddLogger()
  {
    $instance = $this->object->addLogger(function() {});
    $this->assertInstanceOf('Storm\Engine\PostGreSql', $instance);
  }

  /**
   * @covers Storm\Engine\AbstractEngine::log
   */
  public function testLog()
  {
    $trigger = new StdClass();
    $trigger->success = null;
    $this->object->addLogger(function($trigger) {
      $trigger->success = true;
    })
    ->log($trigger);


    $this->assertTrue($trigger->success);
  }
}
