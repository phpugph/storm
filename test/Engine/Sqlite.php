<?php

namespace Storm\Engine;

use PDO;
use StdClass;
use PHPUnit\Framework\TestCase;

use Storm\SqlFactory;

use UGComponents\Profiler\InspectorHandler;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-07-27 at 02:11:02.
 */
class Storm_Engine_Sqlite_Test extends TestCase
{
  /**
   * @var Sqlite
   */
  protected $object;

  /**
   * Sets up the fixture, for example, opens a network connection.
   * This method is called before a test is executed.
   */
  protected function setUp(): void
  {
    $connection = include(dirname(__DIR__).'/assets/sqlite.php');
    $this->object = SqlFactory::load($connection);
    $connection->setAttribute( PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION );
  }

  /**
   * Tears down the fixture, for example, closes a network connection.
   * This method is called after a test is executed.
   */
  protected function tearDown(): void
  {
  }

  /**
   * @covers Storm\Engine\Sqlite::connect
   */
  public function testConnect()
  {
    $instance = $this->object->connect(include(dirname(__DIR__).'/assets/sqlite.php'));

    $this->assertInstanceOf('Storm\Engine\Sqlite', $instance);
  }

  /**
   * @covers Storm\Engine\Sqlite::getAlterQuery
   */
  public function testGetAlterQuery()
  {
    $instance = $this->object->getAlterQuery('foobar');
    $this->assertInstanceOf('Storm\Query\Sqlite\Alter', $instance);
  }

  /**
   * @covers Storm\Engine\Sqlite::getColumns
   */
  public function testGetColumns()
  {
    $actual = $this->object->getColumns('unit_post');
    $this->assertTrue(is_array($actual));
  }

  /**
   * @covers Storm\Engine\Sqlite::getCreateQuery
   */
  public function testGetCreateQuery()
  {
    $instance = $this->object->getCreateQuery('foobar');
    $this->assertInstanceOf('Storm\Query\Sqlite\Create', $instance);
  }

  /**
   * @covers Storm\Engine\Sqlite::getPrimaryKey
   */
  public function testGetPrimaryKey()
  {
    $actual = $this->object->getPrimaryKey('unit_post');
    $this->assertEquals('post_id', $actual);
  }

  /**
   * @covers Storm\Engine\Sqlite::getTables
   */
  public function testGetTables()
  {
    $actual = $this->object->getTables();
    $this->assertEquals('unit_post', $actual[0]['name']);
  }

  /**
   * @covers Storm\Engine\Sqlite::insertRows
   */
  public function testInsertRows()
  {
    $instance = $this->object->insertRows('unit_post', array(
      array(
        'post_slug'      => 'unit-test-2-'.md5(uniqid()),
        'post_title'     => 'Unit Test 2',
        'post_detail'     => 'Unit Test Detail 2',
        'post_published'   => date('Y-m-d'),
        'post_created'     => date('Y-m-d H:i:s'),
        'post_updated'     => date('Y-m-d H:i:s')),
      array(
        'post_slug'      => 'unit-test-3-'.md5(uniqid()),
        'post_title'     => 'Unit Test 3',
        'post_detail'     => 'Unit Test Detail 3',
        'post_published'   => date('Y-m-d'),
        'post_created'     => date('Y-m-d H:i:s'),
        'post_updated'     => date('Y-m-d H:i:s'))
    ));

    $this->assertInstanceOf('Storm\Engine\Sqlite', $instance);
  }

  /**
   * @covers Storm\Engine\Sqlite::getSelectQuery
   */
  public function testGetSelectQuery()
  {
    $instance = $this->object->getSelectQuery();
    $this->assertInstanceOf('Storm\Query\Select', $instance);
  }

  /**
   * @covers Storm\Engine\Sqlite::getUtilityQuery
   */
  public function testGetUtilityQuery()
  {
    $instance = $this->object->getUtilityQuery();
    $this->assertInstanceOf('Storm\Query\Sqlite\Utility', $instance);
  }

  /**
   * @covers Storm\Engine\AbstractEngine::loop
   */
  public function testLoop()
  {
    $self = $this;
    $this->object->loop(function($i) use ($self) {
      $self->assertInstanceOf('Storm\Engine\Sqlite', $this);

      if ($i == 2) {
        return false;
      }
    });
  }

  /**
   * @covers Storm\Engine\AbstractEngine::when
   */
  public function testWhen()
  {
    $self = $this;
    $test = 'Good';
    $this->object->when(function() use ($self) {
      $self->assertInstanceOf('Storm\Engine\Sqlite', $this);
      return false;
    }, function() use ($self, &$test) {
      $self->assertInstanceOf('Storm\Engine\Sqlite', $this);
      $test = 'Bad';
    });
  }

  /**
   * @covers Storm\Engine\AbstractEngine::getInspectorHandler
   */
  public function testGetInspectorHandler()
  {
    $instance = $this->object->getInspectorHandler();
    $this->assertInstanceOf('UGComponents\Profiler\InspectorHandler', $instance);
  }

  /**
   * @covers Storm\Engine\AbstractEngine::inspect
   */
  public function testInspect()
  {
    ob_start();
    $this->object->inspect('foobar');
    $contents = ob_get_contents();
    ob_end_clean();

    $this->assertEquals(
      '<pre>INSPECTING Variable:</pre><pre>foobar</pre>',
      $contents
    );
  }

  /**
   * @covers Storm\Engine\AbstractEngine::setInspectorHandler
   */
  public function testSetInspectorHandler()
  {
    $instance = $this->object->setInspectorHandler(new InspectorHandler);
    $this->assertInstanceOf('Storm\Engine\Sqlite', $instance);
  }

  /**
   * @covers Storm\Engine\AbstractEngine::addLogger
   */
  public function testAddLogger()
  {
    $instance = $this->object->addLogger(function() {});
    $this->assertInstanceOf('Storm\Engine\Sqlite', $instance);
  }

  /**
   * @covers Storm\Engine\AbstractEngine::log
   */
  public function testLog()
  {
    $trigger = new StdClass();
    $trigger->success = null;
    $this->object->addLogger(function($trigger) {
      $trigger->success = true;
    })
    ->log($trigger);


    $this->assertTrue($trigger->success);
  }
}
