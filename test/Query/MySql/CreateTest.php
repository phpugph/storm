<?php

namespace Storm\Query\MySql;

use PHPUnit\Framework\TestCase;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-07-27 at 02:11:03.
 */
class CreateTest extends TestCase
{
  /**
   * @var QueryCreate
   */
  protected $object;

  /**
   * Sets up the fixture, for example, opens a network connection.
   * This method is called before a test is executed.
   */
  protected function setUp(): void
  {
    $this->object = new Create('foobar');
  }

  /**
   * Tears down the fixture, for example, closes a network connection.
   * This method is called after a test is executed.
   */
  protected function tearDown(): void
  {
  }

  /**
   * @covers Storm\Query\MySql\Create::__construct
   */
  public function test__construct()
  {
    $actual = $this->object->__construct('foobar');

    $this->assertNull($actual);
  }

  /**
   * @covers Storm\Query\MySql\Create::addField
   */
  public function testAddField()
  {
    $instance = $this->object->addField('foobar', array());
    $this->assertInstanceOf('Storm\Query\MySql\Create', $instance);
  }

  /**
   * @covers Storm\Query\MySql\Create::addKey
   */
  public function testAddKey()
  {
    $instance = $this->object->addKey('foobar', array());
    $this->assertInstanceOf('Storm\Query\MySql\Create', $instance);
  }

  /**
   * @covers Storm\Query\MySql\Create::addPrimaryKey
   */
  public function testAddPrimaryKey()
  {
    $instance = $this->object->addPrimaryKey('foobar');
    $this->assertInstanceOf('Storm\Query\MySql\Create', $instance);
  }

  /**
   * @covers Storm\Query\MySql\Create::addUniqueKey
   */
  public function testAddUniqueKey()
  {
    $instance = $this->object->addUniqueKey('foobar', array());
    $this->assertInstanceOf('Storm\Query\MySql\Create', $instance);
  }

  /**
   * @covers Storm\Query\MySql\Create::getQuery
   */
  public function testGetQuery()
  {
    $this->object->addField('foobar', array(
      'type'    => 'varchar',
      'default'  => 'something',
      'null'    => true,
      'attribute'  => 'unsigned',
      'length'  => 255
    ));
    $this->object->addKey('foobar', array('foobar'));
    $this->object->addPrimaryKey('foobar');
    $this->object->addUniqueKey('foobar', array('foobar'));
    $this->object->setComments('foobar');
    $actual = $this->object->getQuery();
    $this->assertEquals('CREATE TABLE `foobar` (`foobar` varchar(255) unsigned DEFAULT NULL, PRIMARY KEY (`foobar`), UNIQUE KEY `foobar` (`foobar`), KEY `foobar` (`foobar`));', $actual);
  }

  /**
   * @covers Storm\Query\MySql\Create::setComments
   */
  public function testSetComments()
  {
    $instance = $this->object->setComments('foobar');
    $this->assertInstanceOf('Storm\Query\MySql\Create', $instance);
  }

  /**
   * @covers Storm\Query\MySql\Create::setFields
   */
  public function testSetFields()
  {
    $instance = $this->object->setFields(array('foobar'));
    $this->assertInstanceOf('Storm\Query\MySql\Create', $instance);
  }

  /**
   * @covers Storm\Query\MySql\Create::setKeys
   */
  public function testSetKeys()
  {
    $instance = $this->object->setKeys(array('foobar'));
    $this->assertInstanceOf('Storm\Query\MySql\Create', $instance);
  }

  /**
   * @covers Storm\Query\MySql\Create::setTable
   */
  public function testSetTable()
  {
    $instance = $this->object->setTable('foobar');
    $this->assertInstanceOf('Storm\Query\MySql\Create', $instance);
  }

  /**
   * @covers Storm\Query\MySql\Create::setPrimaryKeys
   */
  public function testSetPrimaryKeys()
  {
    $instance = $this->object->setPrimaryKeys(array('foobar'));
    $this->assertInstanceOf('Storm\Query\MySql\Create', $instance);
  }

  /**
   * @covers Storm\Query\MySql\Create::setUniqueKeys
   */
  public function testSetUniqueKeys()
  {
    $instance = $this->object->setUniqueKeys(array('foobar'));
    $this->assertInstanceOf('Storm\Query\MySql\Create', $instance);
  }
}
