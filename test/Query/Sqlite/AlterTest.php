<?php

namespace Storm\Query\Sqlite;

use PHPUnit\Framework\TestCase;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-07-27 at 02:11:03.
 */
class AlterTest extends TestCase
{
  /**
   * @var QueryAlter
   */
  protected $object;

  /**
   * Sets up the fixture, for example, opens a network connection.
   * This method is called before a test is executed.
   */
  protected function setUp(): void
  {
    $this->object = new Alter('foobar');
  }

  /**
   * Tears down the fixture, for example, closes a network connection.
   * This method is called after a test is executed.
   */
  protected function tearDown(): void
  {
  }

  /**
   * @covers Storm\Query\Sqlite\Alter::__construct
   */
  public function test__construct()
  {
    $actual = $this->object->__construct('foobar');

    $this->assertNull($actual);
  }

  /**
   * @covers Storm\Query\Sqlite\Alter::addField
   */
  public function testAddField()
  {
    $instance = $this->object->addField('foobar', array());
    $this->assertInstanceOf('Storm\Query\Sqlite\Alter', $instance);
  }

  /**
   * @covers Storm\Query\Sqlite\Alter::addForeignKey
   */
  public function testAddForeignKey()
  {
    $instance = $this->object->addForeignKey('foobar', 'foo', 'bar');
    $this->assertInstanceOf('Storm\Query\Sqlite\Alter', $instance);
  }

  /**
   * @covers Storm\Query\Sqlite\Alter::addUniqueKey
   */
  public function testAddUniqueKey()
  {
    $instance = $this->object->addUniqueKey('foobar');
    $this->assertInstanceOf('Storm\Query\Sqlite\Alter', $instance);
  }

  /**
   * @covers Storm\Query\Sqlite\Alter::changeField
   */
  public function testChangeField()
  {
    $instance = $this->object->changeField('foobar', array());
    $this->assertInstanceOf('Storm\Query\Sqlite\Alter', $instance);
  }

  /**
   * @covers Storm\Query\Sqlite\Alter::getQuery
   */
  public function testGetQuery()
  {
    $this->object->addField('foobar', array(
      'type'    => 'varchar',
      'default'  => 'something',
      'null'    => true,
      'attribute'  => 'unsigned',
      'length'  => 255
    ));

    $this->object->changeField('foobar', array(
      'type'    => 'varchar',
      'default'  => 'something',
      'null'    => true,
      'attribute'  => 'unsigned',
      'length'  => 255
    ));

    $this->object->addUniqueKey('foobar');
    $this->object->addForeignKey('foobar', 'foo', 'bar');
    $this->object->removeField('foobar');
    $this->object->removeForeignKey('foobar');
    $this->object->removeUniqueKey('foobar');

    $actual = $this->object->getQuery();
    $this->assertEquals('ALTER TABLE "foobar" DROP "foobar", ' . "\n"
      . 'ADD "foobar" varchar(255) unsigned DEFAULT NULL, ' . "\n"
      . 'CHANGE "foobar"  "foobar" varchar(255) unsigned DEFAULT NULL, ' . "\n"
      . 'DROP FOREIGN KEY "foobar", ' . "\n"
      . 'ADD FOREIGN KEY "foobar" REFERENCES foo(bar), ' . "\n"
      . 'DROP UNIQUE "foobar", ' . "\n"
      . 'ADD UNIQUE ("foobar");', $actual);
  }

  /**
   * @covers Storm\Query\Sqlite\Alter::removeField
   * @todo   Implement testRemoveField().
   */
  public function testRemoveField()
  {
    $instance = $this->object->removeField('foobar');
    $this->assertInstanceOf('Storm\Query\Sqlite\Alter', $instance);
  }

  /**
   * @covers Storm\Query\Sqlite\Alter::removeForeignKey
   */
  public function testRemoveForeignKey()
  {
    $instance = $this->object->removeForeignKey('foobar');
    $this->assertInstanceOf('Storm\Query\Sqlite\Alter', $instance);
  }

  /**
   * @covers Storm\Query\Sqlite\Alter::removeUniqueKey
   */
  public function testRemoveUniqueKey()
  {
    $instance = $this->object->removeUniqueKey('foobar');
    $this->assertInstanceOf('Storm\Query\Sqlite\Alter', $instance);
  }

  /**
   * @covers Storm\Query\Sqlite\Alter::setTable
   */
  public function testSetTable()
  {
    $instance = $this->object->setTable('foobar');
    $this->assertInstanceOf('Storm\Query\Sqlite\Alter', $instance);
  }
}
